/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/S6XNPj8HURM
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Chivo } from 'next/font/google'
import { Rubik } from 'next/font/google'

chivo({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect } from "react";
import { NibiruTxClient, newSignerFromMnemonic, Msg, Testnet, NibiruQuerier } from '@nibiruchain/nibijs';
import TransgateConnect from '@zkpass/transgate-js-sdk';
import Link from "next/link"

export function Component() {
  const [account, setAccount] = useState("");
  const [verified, setVerified] = useState(false);
  const [proof, setProof] = useState<Proof | null>(null);
  const [client, setClient] = useState<NibiruTxClient | null>(null);
  const [keplrConnected, setKeplrConnected] = useState(false);
  const [address, setAddress] = useState("");
  const [schemaId] = useState("0f02e026adcb46cba76b2a536e8c218e");
  const [nftMinted, setNFTMinted] = useState(false)
  const [transactionHash, setTransactionHash] = useState("")
  const [isLoading, setIsLoading] = useState(false)



  const verifyWithTransGate = async () => {
    try {
      const appid = "fac64b9c-f1c9-41f7-a8c4-ba31e22dacb2";
      const connector = new TransgateConnect(appid);
      const isAvailable = await connector.isTransgateAvailable();

      if (isAvailable) {
        const res = await connector.launch(schemaId);
        console.log('Verification result:', res);
        validateResult(res);
      } else {
        console.log('Please install TransGate');
      }
    } catch (error) {
      console.log('TransGate error', error);
    }
  };


  const connectKeplr = async () => {
    try {

      if (!window.getOfflineSigner && !window.keplr) {
        alert("Please install Keplr extension");
      } else {
        await window.keplr?.enable("nibiru-testnet-1");
        const offlineSigner = window.getOfflineSigner("nibiru-testnet-1");
        const accounts = await offlineSigner.getAccounts();

        setAccount(accounts[0].address);
        setKeplrConnected(true);

        const chain = Testnet(1);
        const queryClient = await NibiruQuerier.connect(chain.endptTm);
        // const txClient = await NibiruTxClient.connectWithSigner(chain.endptTm, accounts);

        // const txClient = await NibiruTxClient.connectWithSigner(
        //   chain.endptTm, // RPC endpoint
        //   offlineSigner
        // );

        const txClient = await NibiruTxClient.connectWithSigner(
          chain.endptTm, // RPC endpoint
          offlineSigner
        );

        setClient(txClient);

        setAddress(accounts[0].address);
      }
    } catch (error) {
      console.error(error);
    }
  };

  const validateResult = async (res: any) => {
    console.log('Entering validateResult function');
  
    try {
      console.log('Verification result:', res);
  
      setVerified(true);
      setProof(res);
    } catch (error) {
      console.error('Validation error:', error);
    }
  };


  const mintNFT = async () => {
    if (!verified || !proof) {
      console.error('Verification failed or proof is missing');
      return;
    }

    // Replace with your contract logic and address
    const contractAddress = 'nibi1g7fdan7cdxcj36d077pn72m5k5rc57v0v38h0hy9am906cm4vnwqqpg5tq'; // Replace with actual contract address
    // const senderAddress = account;
    const executeMsg = {
    mint: {
              token_id: proof.taskId,
              owner: address,
              token_uri: "https://ipfs.io/ipfs/QmX67oJjQ3v133JH8oafdnkPowwArYjTGxqsc3j4S7LbWy",
              extension: {
                name: "NZKPass",
                description: "NZKPass Soulbound NFT to verify your identity",
                image: "ipfs://QmX67oJjQ3v133JH8oafdnkPowwArYjTGxqsc3j4S7LbWy",
                attributes: []
              }
    }
  };




    try {

    const fee = "auto"; // You can specify the fee if needed
    setIsLoading(true);
    const executeContract = await client?.wasmClient.execute(
      address,
      contractAddress,
      executeMsg,
      fee
    );

    if(executeContract){
      console.log('Transaction result:', executeContract);
      setIsLoading(false);
      setNFTMinted(true);
      setTransactionHash(executeContract.transactionHash); 
  }
} catch (err) {
  console.error('Minting failed:', err);
}

  };


  return (
    <div className="flex flex-col min-h-screen bg-white">
      <header className="bg-white py-4 px-6 shadow-sm">
        <div className="container mx-auto flex items-center justify-between">
          <Link href="#" className="text-2xl font-bold" prefetch={false}>
            NZKPass
          </Link>
        </div>
      </header>
      <main className="flex-1 flex items-center justify-center">
        <div className="max-w-md w-full space-y-6">
          
          {!keplrConnected ? (
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-2xl font-bold mb-4">Connect Your Wallet</h2>
              <p className="text-gray-600 mb-6">To get started, please connect your wallet.</p>
              <button
                onClick={connectKeplr}
                className="bg-primary text-primary-foreground rounded-md px-4 py-2 w-full transition-colors hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
              >
                Connect Wallet
              </button>
              <div className="mt-6">
                <div className="bg-gray-200 rounded-full h-4 w-full">
                  <div className="bg-[#00b894] h-4 rounded-full w-1/3" />
                </div>
                <div className="flex justify-between text-xs mt-2">
                  <div>Connect Wallet</div>
                  <div>ZK Proof</div>
                  <div>Mint NFT</div>
                </div>
              </div>
            </div>
          ) : (account && !verified)? (
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-2xl font-bold mb-4">Verify Your Authenticity</h2>
              <p className="text-gray-600 mb-6">Login your discord account, and generate ZK proof to continue.</p>
              <button
                onClick={verifyWithTransGate}
                className="bg-primary text-primary-foreground rounded-md px-4 py-2 w-full transition-colors hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
              >
                Generate ZK Proof
              </button>
              <div className="mt-6">
                <div className="bg-gray-200 rounded-full h-4 w-full">
                  <div className="bg-[#00b894] h-4 rounded-full w-2/3" />
                </div>
                <div className="flex justify-between text-xs mt-2">
                  <div>Connect Wallet</div>
                  <div>ZK Proof</div>
                  <div>Mint NFT</div>
                </div>
              </div>
            </div>
          ) : !nftMinted ? (
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-2xl font-bold mb-4">Mint Your Soulbound NFT</h2>
              <p className="text-gray-600 mb-6">Your wallet is connected and verified. You can now mint a NFT.</p>
              <button
                onClick={mintNFT}
                className="bg-primary text-primary-foreground rounded-md px-4 py-2 w-full transition-colors hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
              >
                Mint NFT
              </button>
              <div className="mt-6">
                <div className="bg-gray-200 rounded-full h-4 w-full">
                  <div className="bg-[#00b894] h-4 rounded-full w-full" />
                </div>
                <div className="flex justify-between text-xs mt-2">
                  <div>Connect Wallet</div>
                  <div>ZK Proof</div>
                  <div>Mint NFT</div>
                </div>
              </div>
            </div>
            
          ) : (
            <div className="bg-white p-6 rounded-lg shadow-md animate-fadeIn">
            
              <div className="flex flex-col items-center">
                <img
                  src="/nft.png"
                  width={200}
                  height={200}
                  alt="NFT Pass"
                  className="rounded-lg shadow-lg animate-bounce"
                />
                <h2 className="text-2xl font-bold mt-6">Congratulations!</h2>
                <p className="text-gray-600 mt-2">You have successfully minted your NFT pass.</p>
                {transactionHash && (
                  <a
                    href={`https://explorer.nibiru.fi/nibiru-testnet-1/tx/${transactionHash}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="mt-4 bg-[#f0f8ff] text-[#1e90ff] rounded-md px-4 py-2 hover:bg-[#e6f2ff]"
                  >
                    Transaction Hash: {transactionHash.slice(0, 10)}...
                  </a>
                )}
              </div>
            </div>
          )}
        </div>
      </main>
      <footer className="bg-white py-4 px-6 text-center text-gray-600">
        <p>Made with ðŸ’— for Web3</p>
      </footer>
      {isLoading && (
        <div className="fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-8 rounded-lg shadow-lg">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary" />
            {/* <p className="mt-4 text-gray-600">Minting your NFT...</p> */}
          </div>
        </div>
      )}
    </div>
  )
}
